import axios, { AxiosResponse } from "axios";

// Define interfaces for the target object and its nested objects
interface SubNestedObject {
  subItemId: number;
  subItemName: string;
}

interface NestedObject {
  itemId: number;
  itemName: string;
  subItems: SubNestedObject[];
}

interface MappedObject {
  id: number;
  name: string;
  email: string;
  items: NestedObject[];
}

// Define an interface for the API response structure (an array of objects)
type ApiResponse = MappedObject[];

// Function to map the response data to the desired object structure
function mapResponseToObjects(data: ApiResponse): MappedObject[] {
  return data.map((obj) => ({
    id: obj.id,
    name: obj.name,
    email: obj.email,
    items: obj.items.map((item) => ({
      itemId: item.itemId,
      itemName: item.itemName,
      subItems: item.subItems.map((subItem) => ({
        subItemId: subItem.subItemId,
        subItemName: subItem.subItemName,
      })),
    })),
  }));
}

// Function to fetch data and use the mapping function
async function fetchDataAndMap(url: string): Promise<MappedObject[] | null> {
  try {
    const response: AxiosResponse<ApiResponse> = await axios.get(url);

    // Use the separate mapping function
    return mapResponseToObjects(response.data);
  } catch (error) {
    console.error("Error fetching data:", error);
    return null;
  }
}

// Usage example
(async () => {
  const url = "https://api.example.com/users"; // Replace with your API URL
  const result = await fetchDataAndMap(url);

  if (result) {
    console.log("Mapped Objects:", result);
  } else {
    console.log("Failed to fetch or map data.");
  }
})();
