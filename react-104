// src/types/User.ts
export interface User {
  id: number;
  name: string;
  username: string;
  email: string;
  address: {
    street: string;
    suite: string;
    city: string;
    zipcode: string;
    geo: {
      lat: string;
      lng: string;
    };
  };
  phone: string;
  website: string;
  company: {
    name: string;
    catchPhrase: string;
    bs: string;
  };
}


{
  "users": [
    {
      "id": 1,
      "name": "Leanne Graham",
      "username": "Bret",
      "email": "Sincere@april.biz",
      "address": {
        "street": "Kulas Light",
        "suite": "Apt. 556",
        "city": "Gwenborough",
        "zipcode": "92998-3874",
        "geo": {
          "lat": "-37.3159",
          "lng": "81.1496"
        }
      },
      "phone": "1-770-736-8031 x56442",
      "website": "hildegard.org",
      "company": {
        "name": "Romaguera-Crona",
        "catchPhrase": "Multi-layered client-server neural-net",
        "bs": "harness real-time e-markets"
      }
    },
    {
      "id": 2,
      "name": "Ervin Howell",
      "username": "Antonette",
      "email": "Shanna@melissa.tv",
      "address": {
        "street": "Victor Plains",
        "suite": "Suite 879",
        "city": "Wisokyburgh",
        "zipcode": "90566-7771",
        "geo": {
          "lat": "-43.9509",
          "lng": "-34.4618"
        }
      },
      "phone": "010-692-6593 x09125",
      "website": "anastasia.net",
      "company": {
        "name": "Deckow-Crist",
        "catchPhrase": "Proactive didactic contingency",
        "bs": "synergize scalable supply-chains"
      }
    }
  ]
}


// src/services/userService.ts
import axios from 'axios';
import { User } from '../types/User';

// Local JSON import (in a real app, this would be a server endpoint)
import usersData from '../data/users.json';

export class UserService {
  // Simulated API call using local JSON data
  static async fetchUsers(): Promise<User[]> {
    try {
      // Simulate network delay
      await new Promise(resolve => setTimeout(resolve, 500));

      // In a real scenario, this would be an actual Axios GET request
      // const response = await axios.get<{users: User[]}>('/api/users');
      // return response.data.users;

      return usersData.users;
    } catch (error) {
      console.error('Error fetching users:', error);
      throw error;
    }
  }

  // Fetch a single user by ID
  static async fetchUserById(id: number): Promise<User | undefined> {
    try {
      // Simulate network delay
      await new Promise(resolve => setTimeout(resolve, 500));

      // In a real scenario, this would be an actual Axios GET request
      // const response = await axios.get<User>(`/api/users/${id}`);
      // return response.data;

      return usersData.users.find(user => user.id === id);
    } catch (error) {
      console.error(`Error fetching user with id ${id}:`, error);
      throw error;
    }
  }

  // Search users by name
  static async searchUsersByName(name: string): Promise<User[]> {
    try {
      // Simulate network delay
      await new Promise(resolve => setTimeout(resolve, 500));

      return usersData.users.filter(user => 
        user.name.toLowerCase().includes(name.toLowerCase())
      );
    } catch (error) {
      console.error('Error searching users:', error);
      throw error;
    }
  }
}
